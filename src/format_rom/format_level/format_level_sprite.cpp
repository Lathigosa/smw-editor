#include "format_level_sprite.h"

#include <QtOpenGL>;

namespace static_string {
  static const char* standard_sprite_names[] = {
	  "Shelless Green Koopa",
	  "Shelless Red Koopa",
	  "Shelless Blue Koopa",
	  "Shelless Yellow Koopa",
	  "Green Koopa",
	  "Red Koopa",
	  "Blue Koopa",
	  "Yellow Koopa",
	  "Green Koopa (Flying Left)",
	  "Green Koopa (Bouncing)",
	  "Red Koopa (Flying Vertical)",
	  "Red Koopa (Flying Horizontal)",
	  "Yellow Koopa (with Wings)",
	  "Bob-omb",
	  "Keyhole",
	  "Galoomba",
	  "Galoomba (Bouncing with Wings)",
	  "Buzzy Beetle",
	  "Unused",
	  "Spiny",
	  "Falling Spiny",
	  "Fish (Horizontal)",
	  "Fish (Vertical)",
	  "Fish (Generated)",
	  "Fish (Surface Jumping)",
	  "Display Text (#1)",
	  "Classic Piranha Plant",
	  "Bouncing Football (Stationary)",
	  "Bullet Bill",
	  "Hopping Flame",
	  "Lakitu",
	  "Magikoopa",
	  "Magikoopa's Magic",
	  "Moving Coin",
	  "Green Koopa (Vertical Net)",
	  "Red Koopa (Vertical Net)",
	  "Green Koopa (Horizontal Net)",
	  "Red Koopa (Horizontal Net)",
	  "Thwomp",
	  "Thwimp",
	  "Big Boo",
	  "Koopa Kid",
	  "Classic Piranha Plant (Upside Down)",
	  "Sumo Brother's Fire Lightning",
	  "Yoshi Egg",
	  "Baby Green Yoshi",
	  "Spike Top",
	  "Portable Spring Board",
	  "Dry Bones (Throws Bones)",
	  "Bony Beetle",
	  "Dry Bones (Stays on Ledge)",
	  "Fireball",
	  "Boss Fireball",
	  "Green Yoshi",
	  "Unused",
	  "Boo",
	  "Eerie",
	  "Eerie (Wave Motion)",
	  "Urchin (Fixed)",
	  "Urchin (Wall Detect)",
	  "Urchin (Wall Follow)",
	  "Rip Van Fish",
	  "P-Switch",
	  "Para-Galoomba",
	  "Para-Bomb",
	  "Dolphin (Horizontal)",
	  "Dolphin 2 (Horizontal)",
	  "Dolphin (Vertical)",
	  "Torpedo Ted",
	  "Directional Coins",
	  "Diggin' Chunk",
	  "Fish (Swimming/Jumping)",
	  "Small Boulder",
	  "Growing/Shrinking Pipe End",
	  "Goal Point Question Sphere",
	  "Lakitu (Pipe Dwelling)",
	  "Exploding Block",
	  "Monty Mole (In Ground)",
	  "Monty Mole (In Ledge)",
	  "Jumping Piranha Plant",
	  "Jumping Piranha Plant (Fire)",
	  "Ninji",
	  "Moving Ledge Hole in Ghost House",
	  "Throw Block Sprite",
	  "Climbing Net Door",
	  "Checkerboard Platform (Horizontal)",
	  "Flying Rock Platform (Horizontal)",
	  "Checkerboard Platform (Vertical)",
	  "Flying Rock Platform (Vertical)",
	  "Turn Block Bridge (Horizontal & Vertical)",
	  "Turn Block Bridge (Horizontal)",
	  "Brown Platform (in Water)",
	  "Checkerboard Platform (Falls)",
	  "Orange Platform (in Water)",
	  "Orange Platform (Forever)",
	  "Brown Platform on Chain",
	  "Flat Green Switch Palace Switch",
	  "Floating Skulls",
	  "Brown Platform (Line Guided)",
	  "Checker/Brown Platform (Line Guided)",
	  "Rope Mechanism (Line Guided)",
	  "Chainsaw (Line Guided)",
	  "Chainsaw (Line Guided, Upside Down)",
	  "Grinder (Line Guided)",
	  "Fuzz Ball (Line Guided)",
	  "Unused",
	  "Coin Game Cloud",
	  "Spring Board (Left Wall)",
	  "Spring Board (Right Wall)",
	  "Invisible Solid Block",
	  "Dino Rhino",
	  "Dino Torch",
	  "Pokey",
	  "Super Koopa (Red Cape)",
	  "Super Koopa (Yellow Cape)",
	  "Super Koopa (Feather)",
	  "Mushroom",
	  "Flower",
	  "Star",
	  "Feather",
	  "1-Up",
	  "Growing Vine",
	  "Fireworks",
	  "Goal Point",
	  "Princess Peach",
	  "Balloon",
	  "Flying Red Coin",
	  "Flying Yellow 1-Up",
	  "Key",
	  "Changing Item",
	  "Bonus Game Sprite",
	  "Left Flying Question Block",
	  "Flying Question Block",
	  "Unused (?)",
	  "Wiggler",
	  "Lakitu's Cloud",
	  "Winged Cage Sprite",
	  "Layer 3 Smash",
	  "Small Bird",
	  "Puff of Smoke",
	  "Fireplace Smoke/Exit from Side Screen",
	  "Ghost House Exit Sign & Door",
	  "Invisible Warp Hole Blocks",
	  "Scale Platforms",
	  "Large Green Gas Bubble",
	  "Chargin' Chuck",
	  "Splittin' Chuck",
	  "Bouncin' Chuck",
	  "Whistlin' Chuck",
	  "Clapin' Chuck",
	  "Unused (Chargin' Chuck clone)",
	  "Puntin' Chuck",
	  "Pitchin' Chuck",
	  "Vulcano Lotus",
	  "Sumo Brother",
	  "Hammer Brother",
	  "Flying Blocks for Hammer Brother",
	  "Bubble with Sprite",
	  "Ball & Chain",
	  "Banzai Bill",
	  "Activate Bowser Scene",
	  "Bowser's Bowling Ball",
	  "Mechakoopa",
	  "Grey Platform on Chain",
	  "Floating Spike Ball",
	  "Fuzz Ball/Sparky (Ground Guided)",
	  "Hothead (Ground Guided)",
	  "Iggy's Ball",
	  "Blargg",
	  "Reznor",
	  "Fishbone",
	  "Rex",
	  "Wooden Spike (Moving Down and Up)",
	  "Wooden Spike (Moving Up and Down)",
	  "Fishin' Boo",
	  "Boo Block",
	  "Reflecting Stream of Boo Buddies",
	  "Creating/Eating Block",
	  "Falling Spike",
	  "Bowser Statue Fireball",
	  "Grinder (not Line Guided)",
	  "Sinking Fireball",
	  "Reflecting Fireball",
	  "Carrot Top Lift (Upper Right)",
	  "Carrot Top Lift (Upper Left)",
	  "Info Box",
	  "Timed Lift",
	  "Grey Moving Castle Block",
	  "Bowser Statue",
	  "Sliding Koopa (Shelless)",
	  "Swooper Bat",
	  "Mega Mole",
	  "Grey Platform on Lava",
	  "Flying Grey Turn Blocks",
	  "Blurp Fish",
	  "Porcu-Puffer Fish",
	  "Grey Platform (Falls)",
	  "Big Boo Boss",
	  "Dark Room with Spotlight",
	  "Invisible Mushroom",
	  "Light Switch Block for Dark Room",
	  "Generator: Bullet Bill Shooter",
	  "Generator: Torpedo Ted Launcher",
	  "Generator: Eeries",
	  "Generator: Para-Galoombas",
	  "Generator: Para-Bombs",
	  "Generator: Para-Galoombas and Para-Bombs",
	  "Generator: Dolphins (Left)",
	  "Generator: Dolphins (Right)",
	  "Generator: Flying Fish",
	  "Generator: Enemy Go Away!",
	  "Generator: Flying Super Koopas",
	  "Generator: Bubbled Sprites",
	  "Generator: Bullet Bills",
	  "Generator: Bullet Bills (Multidirectional)",
	  "Generator: Bullet Bills (Multidirectional, Diagonal)",
	  "Generator: Bowser Statue Fire",
	  "Generator: Turn Off Generators",
	  "Green Koopa Shell",
	  "Red Koopa Shell",
	  "Blue Koopa Shell",
	  "Yellow Koopa Shell",
	  "Group of 5 Wave-Moving Eeries",
	  "Green Shell (does not use special world colors)",
	  "Rotating Grey Platforms",
	  "Generator: Boo Ceiling",
	  "Boo Ring (Counterclockwise)",
	  "Boo Ring (Clockwise)",
	  "Generator: Swooper Death Bat Ceiling",
	  "Generator: Appearing/Disappearing Boos",
	  "Generator: Background Candle Flames",
	  "Command: Unused",
	  "Command: Special Auto-Scroll Command",
	  "Command: Layer 2 Smash",
	  "Command: Layer 2 Scrolling Command",
	  "Command: Unused",
	  "Command: Unused",
	  "Command: Layer 2 Falls",
	  "Command: Unused",
	  "Command: Layer 2 Sideways-Scrolling",
	  "Command: Unused",
	  "Command: Unused",
	  "Command: Layer 2 On/Off Switch Controller",
	  "Command: Standard Auto-Scroll Command",
	  "Command: Fast Background Scroll",
	  "Command: Layer 2 Sink Command",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused",
	  "Unused"
  };

  static const unsigned char spr_tilemaps[][4] {
	  // Format: 0xPX, 0xYY, 0xFX, 0xYY (P=palette, F=format)
	  {0xD8, 0x0C, 0x00, 0x00},	//0x00 Shelless Green Koopa
	  {0xC8, 0x0C, 0x00, 0x00},	//0x01 Shelless Red Koopa
	  {0xB0, 0x0E, 0x00, 0x00},	//0x02 Shelless Blue Koopa
	  {0xA8, 0x0C, 0x00, 0x00},	//0x03 Shelless Yellow Koopa
	  {0xD2, 0x08, 0x10, 0x0A},	//0x04 Green Koopa
	  {0xC2, 0x08, 0x10, 0x0A},	//0x05 Red Koopa
	  {0xB2, 0x08, 0x10, 0x0A},	//0x06 Blue Koopa
	  {0xA2, 0x08, 0x10, 0x0A},	//0x07 Yellow Koopa
	  {0xD2, 0x08, 0x12, 0x0A},	//0x08 Green Koopa (Flying)
	  {0xD2, 0x08, 0x12, 0x0A},	//0x09 Green Koopa (Bouncing)
	  {0xC2, 0x08, 0x12, 0x0A},	//0x0A Red Koopa (Flying Vertical)
	  {0xC2, 0x08, 0x12, 0x0A},	//0x0B Red Koopa (Flying Horizontal)
	  {0xA2, 0x08, 0x12, 0x0A},	//0x0C Yellow Koopa (With Wings)
	  {0x9C, 0x1C, 0x00, 0x00},	//0x0D Bob-omb
	  {0x8B, 0x0E, 0x5B, 0x0F},	//0x0E Keyhole
	  {0xAA, 0x0A, 0x00, 0x00},	//0x0F Galoomba
	  {0xA8, 0x0A, 0x00, 0x00},	//0x10 Galoomba (With Wings)
	  {0xE0, 0x18, 0x00, 0x00},	//0x11 Buzzy Beetle
	  {0x00, 0x00, 0x00, 0x00},	//0x12 Unused
	  {0xC2, 0x18, 0x00, 0x00},	//0x13 Spiny
	  {0xC4, 0x18, 0x60, 0x00},	//0x14 Falling Spiny
	  {0xA7, 0x16, 0x00, 0x00},	//0x15 Fish (Horizontal)
	  {0xA7, 0x16, 0x00, 0x00},	//0x16 Fish (Vertical)
	  {0xA7, 0x16, 0x00, 0x00},	//0x17 Fish (Generated)
	  {0xA9, 0x16, 0x00, 0x00},	//0x18 Fish (Surface Jumping)
	  {0x00, 0x00, 0x00, 0x00},	//0x19 Display Text (#1)
	  {0x00, 0x00, 0x00, 0x00},	//0x1A Classic Piranha Plant
	  {0x88, 0x18, 0x00, 0x00},	//0x1B Stationary Football
	  {0x96, 0x0A, 0x00, 0x00},	//0x1C Bullet Bill
	  {0xAE, 0x1A, 0x00, 0x00},	//0x1D Hopping Flame
	  {0xA8, 0x1A, 0x10, 0x06},	//0x1E Lakitu
	  {0xB4, 0x1A, 0x14, 0x1C},	//0x1F Magikoopa
	  {0xB8, 0x18, 0x00, 0x00},	//0x20 Magikoopa's Magic
	  {0xA8, 0x0E, 0x00, 0x00},	//0x21 Moving Coin
	  {0xD7, 0x10, 0x17, 0x12},	//0x22 Green Koopa (Vertical Net)
	  {0xC7, 0x10, 0x17, 0x12},	//0x23 Red Koopa (Vertical Net)
	  {0xD7, 0x10, 0x17, 0x12},	//0x24 Green Koopa (Horizontal Net)
	  {0xC7, 0x10, 0x17, 0x12},	//0x25 Red Koopa (Horizontal Net)
	  {0x90, 0x00, 0x00, 0x00},
	  {0x92, 0x1A, 0x70, 0x00},	//0x27 Thwimp
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0xC0, 0x10, 0x00, 0x00},	//0x2C Yoshi Egg
	  {0x00, 0x00, 0x00, 0x00},	//
	  {0xCC, 0x18, 0x00, 0x00},	//0x2E Spike Top
	  {0xD8, 0x02, 0x60, 0x00},	//0x2F Portable Spring Board
	  {0x00, 0x00, 0x00, 0x00},	//0x30
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0x40
	  {0xB2, 0x1E, 0x37, 0x1E},	//0x41 Dolphin Horizontal
	  {0xB2, 0x1E, 0x37, 0x1E},	//0x42 Dolphin Horizontal
	  {0xBE, 0x1C, 0x1E, 0x1E},	//0x43 Dolphin Vertical
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0xD4, 0x1A, 0x46, 0x1A},	//0x49 Growing/Shrinking Pipe End
	  {0x00, 0x00, 0x00, 0x00},
	  {0xAC, 0x1E, 0x00, 0x00},	//0x4B Lakitu Pipe Dwelling
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0xCE, 0x0A, 0x00, 0x00},	//0x4F Jumping Piranha Plant
	  {0xCE, 0x0A, 0x00, 0x00},	//0x50 Jumping Piranha Plant (Fire)
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0x60
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0x70
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0xC4, 0x02, 0x00, 0x00},	//0x74 Mushroom
	  {0xD6, 0x02, 0x00, 0x00},	//0x75 Flower
	  {0xA8, 0x04, 0x00, 0x00},	//0x76 Star
	  {0xAE, 0x00, 0x00, 0x00},	//0x77 Feather
	  {0xD4, 0x02, 0x00, 0x00},	//0x78 1-Up
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x44, 0x0D, 0x25, 0x0D},	//0x7B Goal Point
	  {0x00, 0x00, 0x00, 0x00},
	  {0xA4, 0x1E, 0x00, 0x00},	//0x7D P-Balloon
	  {0xC8, 0x0E, 0x00, 0x00},	//0x7E Red Flying Coin
	  {0xD4, 0x02, 0x00, 0x00},	//0x7F Flying Yellow 1-Up
	  {0x8C, 0x0E, 0x00, 0x00},	//0x80 Key
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0x82 Bonus Game Sprite
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0x90
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xA0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xB0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0xB0, 0x0C, 0x00, 0x00},	//0xB9 Info Box
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xC0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xD0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xE0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},	//0xF0
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00},
	  {0x00, 0x00, 0x00, 0x00}	//0xFF
  };
}

rom_error sprite_toolbox::load_items_format(const SMW_ROM &rom, enum_tileset current_tileset)
{
	load_vanilla_items_format(current_tileset);
}

rom_error sprite_toolbox::load_vanilla_items_format(enum_tileset current_tileset)
{
	for(unsigned int a=0; a<0x100; a++)
	{
		items[a].name = static_string::standard_sprite_names[a];
		//items[a].opengl_tilemap = 0;

		unsigned char data[4*4 * 4];

		unsigned char format = (static_string::spr_tilemaps[a][2] & 0xF0) >> 4;

		switch(format) {
		case 0x00:	// 2x2 normal sprite
		{
			items[a].size_x = 2;
			items[a].size_y = 2;

			unsigned char tilemap_x = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x0] = tilemap_x + 0x00; data[0x1] = static_string::spr_tilemaps[a][1] + 0x00; data[0x2] = 0; data[0x3] = tilemap_palette;
			data[0x4] = tilemap_x + 0x01; data[0x5] = static_string::spr_tilemaps[a][1] + 0x00; data[0x6] = 0; data[0x7] = tilemap_palette;
			data[0x8] = tilemap_x + 0x00; data[0x9] = static_string::spr_tilemaps[a][1] + 0x01; data[0xA] = 0; data[0xB] = tilemap_palette;
			data[0xC] = tilemap_x + 0x01; data[0xD] = static_string::spr_tilemaps[a][1] + 0x01; data[0xE] = 0; data[0xF] = tilemap_palette;

			break;
		}
		case 0x01:	// 2x4 tall sprite (with offset)
		{
			items[a].size_x = 2;
			items[a].size_y = 4;

			items[a].displacement_y = -16;

			unsigned char tilemap_x1 = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_x2 = static_string::spr_tilemaps[a][2] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x00] = tilemap_x1 + 0x00; data[0x01] = static_string::spr_tilemaps[a][1] + 0x00; data[0x02] = 0; data[0x03] = tilemap_palette;
			data[0x04] = tilemap_x1 + 0x01; data[0x05] = static_string::spr_tilemaps[a][1] + 0x00; data[0x06] = 0; data[0x07] = tilemap_palette;
			data[0x08] = tilemap_x1 + 0x00; data[0x09] = static_string::spr_tilemaps[a][1] + 0x01; data[0x0A] = 0; data[0x0B] = tilemap_palette;
			data[0x0C] = tilemap_x1 + 0x01; data[0x0D] = static_string::spr_tilemaps[a][1] + 0x01; data[0x0E] = 0; data[0x0F] = tilemap_palette;

			data[0x10] = tilemap_x2 + 0x00; data[0x11] = static_string::spr_tilemaps[a][3] + 0x00; data[0x12] = 0; data[0x13] = tilemap_palette;
			data[0x14] = tilemap_x2 + 0x01; data[0x15] = static_string::spr_tilemaps[a][3] + 0x00; data[0x16] = 0; data[0x17] = tilemap_palette;
			data[0x18] = tilemap_x2 + 0x00; data[0x19] = static_string::spr_tilemaps[a][3] + 0x01; data[0x1A] = 0; data[0x1B] = tilemap_palette;
			data[0x1C] = tilemap_x2 + 0x01; data[0x1D] = static_string::spr_tilemaps[a][3] + 0x01; data[0x1E] = 0; data[0x1F] = tilemap_palette;

			break;
		}
		case 0x02:	// 3x1 goal point sprite
		{
			items[a].size_x = 3;
			items[a].size_y = 1;

			items[a].displacement_x = -8;
			items[a].displacement_y = 8;

			unsigned char tilemap_x1 = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_x2 = static_string::spr_tilemaps[a][2] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x00] = tilemap_x1 + 0x00; data[0x01] = static_string::spr_tilemaps[a][1] + 0x00; data[0x02] = 0; data[0x03] = tilemap_palette;
			data[0x04] = tilemap_x2 + 0x00; data[0x05] = static_string::spr_tilemaps[a][3] + 0x00; data[0x06] = 0; data[0x07] = tilemap_palette;
			data[0x08] = tilemap_x2 + 0x00; data[0x09] = static_string::spr_tilemaps[a][3] + 0x00; data[0x0A] = 0; data[0x0B] = tilemap_palette;
			break;
		}
		case 0x03:	// 5x2 dolphin
		{
			items[a].size_x = 5;
			items[a].size_y = 2;

			unsigned char tilemap_x1 = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_x2 = static_string::spr_tilemaps[a][2] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x00] = tilemap_x1 + 0x00; data[0x01] = static_string::spr_tilemaps[a][1] + 0x00; data[0x02] = 0; data[0x03] = tilemap_palette;
			data[0x04] = tilemap_x1 + 0x01; data[0x05] = static_string::spr_tilemaps[a][1] + 0x00; data[0x06] = 0; data[0x07] = tilemap_palette;

			data[0x08] = tilemap_x2 + 0x00; data[0x09] = static_string::spr_tilemaps[a][3] + 0x00; data[0x0A] = 0; data[0x0B] = tilemap_palette;
			data[0x0C] = tilemap_x2 + 0x01; data[0x0D] = static_string::spr_tilemaps[a][3] + 0x00; data[0x0E] = 0; data[0x0F] = tilemap_palette;
			data[0x10] = tilemap_x2 + 0x02; data[0x11] = static_string::spr_tilemaps[a][3] + 0x00; data[0x12] = 0; data[0x13] = tilemap_palette;

			data[0x14] = tilemap_x1 + 0x00; data[0x15] = static_string::spr_tilemaps[a][1] + 0x01; data[0x16] = 0; data[0x17] = tilemap_palette;
			data[0x18] = tilemap_x1 + 0x01; data[0x19] = static_string::spr_tilemaps[a][1] + 0x01; data[0x1A] = 0; data[0x1B] = tilemap_palette;

			data[0x1C] = tilemap_x2 + 0x00; data[0x1D] = static_string::spr_tilemaps[a][3] + 0x01; data[0x1E] = 0; data[0x1F] = tilemap_palette;
			data[0x20] = tilemap_x2 + 0x01; data[0x21] = static_string::spr_tilemaps[a][3] + 0x01; data[0x22] = 0; data[0x23] = tilemap_palette;
			data[0x24] = tilemap_x2 + 0x02; data[0x25] = static_string::spr_tilemaps[a][3] + 0x01; data[0x26] = 0; data[0x27] = tilemap_palette;

			break;
		}
		case 0x04:	// 4x2 wide sprite
		{
			items[a].size_x = 4;
			items[a].size_y = 2;

			unsigned char tilemap_x1 = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_x2 = static_string::spr_tilemaps[a][2] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x00] = tilemap_x1 + 0x00; data[0x01] = static_string::spr_tilemaps[a][1] + 0x00; data[0x02] = 0; data[0x03] = tilemap_palette;
			data[0x04] = tilemap_x1 + 0x01; data[0x05] = static_string::spr_tilemaps[a][1] + 0x00; data[0x06] = 0; data[0x07] = tilemap_palette;
			data[0x08] = tilemap_x2 + 0x00; data[0x09] = static_string::spr_tilemaps[a][3] + 0x00; data[0x0A] = 0; data[0x0B] = tilemap_palette;
			data[0x0C] = tilemap_x2 + 0x01; data[0x0D] = static_string::spr_tilemaps[a][3] + 0x00; data[0x0E] = 0; data[0x0F] = tilemap_palette;

			data[0x10] = tilemap_x1 + 0x00; data[0x11] = static_string::spr_tilemaps[a][1] + 0x01; data[0x12] = 0; data[0x13] = tilemap_palette;
			data[0x14] = tilemap_x1 + 0x01; data[0x15] = static_string::spr_tilemaps[a][1] + 0x01; data[0x16] = 0; data[0x17] = tilemap_palette;
			data[0x18] = tilemap_x2 + 0x00; data[0x19] = static_string::spr_tilemaps[a][3] + 0x01; data[0x1A] = 0; data[0x1B] = tilemap_palette;
			data[0x1C] = tilemap_x2 + 0x01; data[0x1D] = static_string::spr_tilemaps[a][3] + 0x01; data[0x1E] = 0; data[0x1F] = tilemap_palette;

			break;
		}
		case 0x05:	// 1x2 small sprite
		{
			items[a].size_x = 1;
			items[a].size_y = 2;



			unsigned char tilemap_x1 = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_x2 = static_string::spr_tilemaps[a][2] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x00] = tilemap_x1 + 0x00; data[0x01] = static_string::spr_tilemaps[a][1] + 0x00; data[0x02] = 0; data[0x03] = tilemap_palette;
			data[0x04] = tilemap_x2 + 0x00; data[0x05] = static_string::spr_tilemaps[a][3] + 0x00; data[0x06] = 0; data[0x07] = tilemap_palette;

			break;
		}
		case 0x06:	// 2x2 circular symmetric sprite
		{
			items[a].size_x = 2;
			items[a].size_y = 2;

			unsigned char tilemap_x = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x0] = tilemap_x + 0x00; data[0x1] = static_string::spr_tilemaps[a][1] + 0x00; data[0x2] = 0; data[0x3] = tilemap_palette;
			data[0x4] = tilemap_x + 0x00; data[0x5] = static_string::spr_tilemaps[a][1] + 0x00; data[0x6] = 64; data[0x7] = tilemap_palette;
			data[0x8] = tilemap_x + 0x00; data[0x9] = static_string::spr_tilemaps[a][1] + 0x00; data[0xA] = 255; data[0xB] = tilemap_palette;
			data[0xC] = tilemap_x + 0x00; data[0xD] = static_string::spr_tilemaps[a][1] + 0x00; data[0xE] = 191; data[0xF] = tilemap_palette;

			break;
		}
		case 0x07:	// 2x2 horizontally symmetric sprite
		{
			items[a].size_x = 2;
			items[a].size_y = 2;

			unsigned char tilemap_x = static_string::spr_tilemaps[a][0] & 0x0F;
			unsigned char tilemap_palette = (static_string::spr_tilemaps[a][0] & 0xF0) >> 4;

			data[0x0] = tilemap_x + 0x00; data[0x1] = static_string::spr_tilemaps[a][1] + 0x00; data[0x2] = 0; data[0x3] = tilemap_palette;
			data[0x4] = tilemap_x + 0x00; data[0x5] = static_string::spr_tilemaps[a][1] + 0x00; data[0x6] = 64; data[0x7] = tilemap_palette;
			data[0x8] = tilemap_x + 0x00; data[0x9] = static_string::spr_tilemaps[a][1] + 0x01; data[0xA] = 0; data[0xB] = tilemap_palette;
			data[0xC] = tilemap_x + 0x00; data[0xD] = static_string::spr_tilemaps[a][1] + 0x01; data[0xE] = 64; data[0xF] = tilemap_palette;

			break;
		}
		default: break;
		}


		if(items[a].opengl_tilemap == 0)
			glGenTextures(1, &items[a].opengl_tilemap);

		glBindTexture(GL_TEXTURE_2D, items[a].opengl_tilemap);

		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, items[a].size_x, items[a].size_y, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0);

		// Blocky filtering:
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

		glTexSubImage2D(GL_TEXTURE_2D,
						0,
						0 * 2,
						0 * 2,
						items[a].size_x,												// Size of each tile is 2 by 2 8x8 tiles.
						items[a].size_y,
						GL_RGBA,
						GL_UNSIGNED_BYTE,
						reinterpret_cast<void*>(data));
	}

	// Set some specific sprite data as well:
	items[0x0E].displacement_x = 4;				// 0x0E: Keyhole
	items[0x4F].displacement_x = 8;				// 0x4F: Jumping Piranha Plant
	items[0x50].displacement_x = 8;				// 0x50: Jumping Piranha Plant
}
